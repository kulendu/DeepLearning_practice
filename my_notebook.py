# -*- coding: utf-8 -*-
"""my_notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1paoP4UeW_yVTSiEJqzN0YU8sTvLxx2xJ

####  This is my first notebook for getting started to Deep Learning

# Importing all the essential libraries
"""

import pandas as pd
import numpy as np
import matplotlib as plt
import seaborn as sns

"""## Reading the csv file"""

data  = pd.read_csv('fake_reg.csv')

"""## Checking the head of the dataset"""

data.head()

"""## Some data vizualization"""

sns.pairplot(data)

"""## Doing the test train split"""

from sklearn.model_selection import train_test_split

x = data[['feature1', 'feature2']].values
y = data['price'].values

x_train,x_test,y_train,y_test = train_test_split(x,y,train_size=0.3, random_state=101)

x_train.shape

x_test.shape

"""# Optimizing the training and testing datasets"""

from sklearn.preprocessing import MinMaxScaler

scalar = MinMaxScaler()

scalar.fit(x_train)

x_train = scalar.transform(x_train)
x_test = scalar.transform(x_test)

"""## Creating the Neural Network"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential()

model.add(Dense(units=4, activation='relu'))  #The first layer
model.add(Dense(units=4, activation='relu'))  #secind layer
model.add(Dense(units=4, activation='relu'))  #third layer

model.add(Dense(units=1))   #final output layer

model.compile(optimizer='rmsprop', loss='mse')  #compile the NN

model.fit(x=x_train, y=y_train, epochs=250)   #fitting the NN in a model

epoch_history = pd.DataFrame(model.history.history)

epoch_history.head()

epoch_history.plot()

test_pred = model.predict(x_test)

test_pred.shape

pred_df = pd.DataFrame(y_test, columns=["true tested value"])

pred_df

pred_df.shape

test_df = pd.DataFrame(test_pred, columns=['predicted value'])

test_df.head()

test_df.shape

pred_df = pd.concat([pred_df, test_df], axis=1)

pred_df #testing the Neural Network

"""# Evaluation of the Neural Network"""

from sklearn.metrics import mean_absolute_error, mean_squared_error

mean_absolute_error(pred_df['true tested value'], pred_df['predicted value'])

data.describe()

mean_squared_error(pred_df['true tested value'], pred_df['predicted value'])

